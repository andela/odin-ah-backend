swagger: '2.0'
info:
  title: Odin-ah-backend
  description: A Social platform for the creative at heart.
  version: v1
securityDefinitions:
  UserSecurity:
    type: apiKey
    in: header
    name: Authorization
host: 'odin-ah-backend-staging.herokuapp.com'
basePath: /api/v1
produces:
- application/json
schemes:
- http
- https
paths:
  /auth/signup:
    post:
      summary: Add new user
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: user information
        description: user username
        schema:
          $ref: '#/definitions/UserRequest'
      responses:
        '201':
          description: Expected response to a valid request
          schema:
            $ref: '#/definitions/UserResult'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: A conflict occured.
          schema:
            $ref: '#/definitions/UserError'
      tags:
      - User
  /auth/login:
    post:
      summary: Login in an existing user
      description: Login in an existing user.
      parameters:
      - in: body
        name: user
        description: Author's Username
        schema:
          $ref: '#/definitions/LoginRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/LoginResponse'
        '400':
          description: Bad Request..
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Invalid user credentials.
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden request. User has to verify their email before login
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Authentication
  /auth/google:
    post:
      summary: Signs in a user with Google OAuth
      description: >-
        Signs in a user with Google OAuth2 and responds with an authentication
        token for further requests
      responses:
        '200':
          description: Authentication was successful
          schema:
            $ref: '#/definitions/LoginResponse'
        '401':
          description: Authentication failed
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: >-
            User's social account does not have any associated email. This is
            especially an issue with Facebook.
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Authentication
  /auth/facebook:
    post:
      summary: Signs in a user with Facebook OAuth
      description: >-
        Signs in a user with Facebook OAuth2 and responds with an authentication
        token for further requests
      responses:
        '200':
          description: Authentication was successful
          schema:
            $ref: '#/definitions/LoginResponse'
        '401':
          description: Authentication failed
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: >-
            User's social account does not have any associated email. This is
            especially an issue with Facebook.
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Authentication
  /auth/twitter:
    post:
      summary: Signs in a user with Twitter OAuth
      description: >-
        Signs in a user with Twitter OAuth and responds with an authentication
        token for further requests
      responses:
        '200':
          description: Authentication was successful
          schema:
            $ref: '#/definitions/LoginResponse'
        '401':
          description: Authentication failed
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: >-
            User's social account does not have any associated email. This is
            especially an issue with Facebook.
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Authentication
  /auth/confirmation:
    post:
      summary: Resends verification link to user email
      description: Resends verification link to user email for account verification
      parameters:
      - in: body
        name: email
        required: true
        schema:
          type: string
          description: User email
      responses:
        '200':
          description: Verification email was successfully resent
          schema:
            $ref: '#/definitions/UserResult'
        '400':
          description: Invalid email
          schema:
            $ref: '#/definitions/UserError'
        '403':
          description: User is already verified
          schema:
            $ref: '#/definitions/UserError'
        '404':
          description: User is not yet registered
          schema:
            $ref: '#/definitions/UserError'
      tags:
      - Authentication

  /users:
    put:
      summary: Update a User Profile
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: profile
        description: A User Profile that needs to be Updated
        schema:
          $ref: '#/definitions/ProfileRequest'
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/ProfileResponse'
        '409':
          description: Conflict
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Users
      security:
      - UserSecurity: []
    get:
      summary: Get a User Profile
      produces:
      - application/json
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: '#/definitions/ProfileListResponse'
        '404':
          description: Profile not found
        '500':
          description: Server error
      tags:
      - Users
      security:
      - UserSecurity: []
  /users/reset-password/begin:
    post:
      summary: Start password reset process
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        required: true
        description: The email of the user who wants to reset password
        schema:
          $ref: '#/definitions/BeginPasswordResetRequest'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BeginPasswordResetResponse'
        '400':
          description: Bad Request
        '500':
          description: Server Error
      tags:
      - Users
  '/users/reset-password/complete/{token}':
    post:
      summary: Complete reset password process
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: token
        in: path
        description: Password reset token sent to email as part of url
        required: true
        type: string
      - in: body
        name: body
        required: true
        description: The new password for resetting
        schema:
          $ref: '#/definitions/CompletePasswordResetRequest'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/CompletePasswordResetResponse'
        '400':
          description: Bad Request
        '500':
          description: Server Error
      tags:
      - Users
  /users/list:
    get:
      summary: Get a list of authors
      parameters:
      - in: query
        name: page
        required: false
        description: Page number.
        schema:
          type: integer
          example: 1
      - in: query
        name: size
        required: false
        description: The number of users to retrieve.
        schema:
          type: integer
          example: 20
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ProfileListResponse'
        '400':
          description: Bad Request
        '500':
          description: Server Error
      tags:
      - Users
      security:
      - UserSecurity: []
  /users/{id}:
    get:
      summary: Get user(author) by id
      parameters:
      - name: id
        in: path
        description: id of the user
        required: true
        type: number
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ProfileResponse'
        '400':
          description: Bad Request
        '500':
          description: Server Error
      tags:
      - Users
      security:
      - UserSecurity: []
  '/users/{id}/{role}':
    put:
      summary: >-
        Update a user's role.
      description: 'A super admin can change the role of a user'
      parameters:
      - name: id
        in: path
        required: true
        description: The id of the user whose role is to be changed
        type: number
      - name: role
        in: path
        required: true
        description: The new role to be assigned.
        type: string
        enum:
        - user
        - admin
        - superadmin
      responses:
        '200':
          description: 'Updated user details'
          schema:
            $ref: '#/definitions/ProfileResponse'
        '401':
          description: Unauthorizated access if not superadmin.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'User not found.'
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Super Admin
      security:
      - UserSecurity: []
  /users/statistics:
    get:
      summary: Get summary of user reading statistics
      consumes:
      - application/json
      produces:
      - application/json
      description: >-
        Returns reading statistics by Id
      parameters:
      - in: query
        name: page
        required: false
        schema:
          type: integer
          description: The number of notifications to retrieve.
          example: 1
      - in: query
        name: size
        required: false
        schema:
          type: integer
          description: The number of notifications to retrieve.
          example: 20
      responses:
        200:
          description: Successful Operation
          schema:
            $ref: '#/definitions/StatisticsResult'
      tags:
      - Reading Statistics
      security:
      - UserSecurity: []

  '/profiles/{userId}/follow':
    post:
      summary: Follow other users
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        required: true
        description: The user Id you want to follow.
        type: number
      responses:
        '200':
          description: successful operation
        '409':
          description: Conflict
        '500':
          description: Server Error
      tags:
      - Follow Users
      security:
      - UserSecurity: []
    delete:
      summary: Unfollow a user
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        required: true
        description: The user Id you want to unfollow.
        type: number
      responses:
        '200':
          description: Successful Operation
        '404':
          description: User not found not found
        '500':
          description: Server error
      tags:
      - Follow Users
      security:
      - UserSecurity: []
  /profiles/follower:
    get:
      summary: Get list of users following me
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
        '409':
          description: Conflict
        '500':
          description: Server Error
      tags:
      - Follow Users
      security:
      - UserSecurity: []
  /profiles/following:
    get:
      summary: Get list of users I am following
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
        '409':
          description: Conflict
        '500':
          description: Server Error
      tags:
      - Follow Users
      security:
      - UserSecurity: []
  /profiles/notification:
    get:
      summary: Get list of notifications opted-in for
      consumes:
      - application/json
      produces:
      - application/json
      description: >-
        Returns a list of notifications by Id
      parameters:
      - in: query
        name: page
        required: false
        description: Page number.
        schema:
          type: integer
          example: 1
      - in: query
        name: size
        required: false
        description: The number of notification to retrieve.
        schema:
          type: integer
          example: 20
      responses:
        200:
          description: Successful Operation
          schema:
            $ref: '#/definitions/NotificationResult'
      tags:
      - Notifications
      security:
      - UserSecurity: []
  /profiles/notification/{notificationId}:
    put:
      summary: Update notification
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: notification
        description: The user notifications to be updated
        schema:
          type: number
          example: 1
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/NotificationResult'
        '404':
          description: Notification does not exist
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Notifications
      security:
      - UserSecurity: []

  /articles:
    get:
      summary: Get list of articles
      description: >-
        Returns a list of articles. Authorization Token is optional to use this
        endpoint.
      parameters:
      - in: query
        name: page
        required: false
        description: Page number.
        schema:
          type: integer
          example: 1
      - in: query
        name: size
        required: false
        description: The number of articles to retrieve.
        schema:
          type: integer
          example: 20
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ArticlesResult'
        '400':
          description: Bad Request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: No articles found.
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Articles
    post:
      summary: Create new article
      description: >-
        This endpoint is used to create new article. Authorization Token is
        required to use this endpoint.
      parameters:
      - name: entry
        in: body
        description: Request data
        schema:
          $ref: '#/definitions/ArticleRequest'
      responses:
        '201':
          description: Article Created
          schema:
            $ref: '#/definitions/ArticleResult'
        '400':
          description: Bad Request.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorizated access.
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Articles
      security:
      - UserSecurity: []
  /articles/{slug}:
    get:
      summary: 'Gets an article with the given {slug}.'
      description: >-
        Returns a single article with the provided {slug}. Authorization Token
        is optional to use this endpoint.
      parameters:
      - name: slug
        in: path
        required: true
        description: The slug of the article to retrieve.
        type: string
      responses:
        '200':
          description: Response data
          schema:
            $ref: '#/definitions/ArticleResult'
        '404':
          description: 'No articles found with {slug}.'
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Articles
    put:
      summary: 'Update article with the given {slug}.'
      description: 'Update and Return the modified article with provided {slug}.'
      parameters:
      - name: slug
        in: path
        required: true
        description: The slug of the article to be updated
        type: string
      - name: article
        in: body
        description: Request data
        schema:
          $ref: '#/definitions/ArticleRequest'
      responses:
        '200':
          description: 'Updated article with the given {slug}'
          schema:
            $ref: '#/definitions/ArticleResult'
        '401':
          description: Unauthorizated access.
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden Request. Authenticated user cannot modified this article.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'No articles found with {slug}.'
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Articles
      security:
      - UserSecurity: []
    delete:
      summary: Deletes an article.
      description: >-
        Deletes an article with the {slug} provided. Authorization Token is
        required to use this endpoint.
      parameters:
      - name: slug
        in: path
        required: true
        description: The slug of the article to delete.
        type: string
      responses:
        '200':
          description: Response data
          schema:
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: Successfully deleted article
        '401':
          description: Unauthorizated access.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden Request. Authenticated user cannot delete this article.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'No articles found with {slug}.'
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Articles
      security:
      - UserSecurity: []
  '/articles/{slug}/comments':
    get:
      summary: 'Gets all the comments for a particular article with the given {slug}.'
      description: >-
        Returns return the first level comments of an article. Authorization Token
        is optional to use this endpoint.
      parameters:
      - name: slug
        in: path
        required: true
        description: The slug of the article to retrieve.
        type: string
      - in: query
        name: page
        required: false
        description: Page number.
        schema:
          type: integer
          example: 1
      - in: query
        name: size
        required: false
        description: The number of articles to retrieve.
        schema:
          type: integer
          example: 20
      responses:
        '200':
          description: Response data
          schema:
            $ref: '#/definitions/ArticleCommentsResult'
        '404':
          description: 'No articles found with {slug}'
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Comments
    post:
      summary: Create a new comment for an article.
      description: >-
        Create a comment for the an article with the given {slug}.
        Authorization Token is required to use this endpoint.
      parameters:
      - name: slug
        in: path
        required: true
        description: The slug of the article to delete.
        type: string
      - name: article
        in: body
        description: Request data
        schema:
          $ref: '#/definitions/CommentRequest'
      responses:
        '200':
          description: Response data
          schema:
            $ref: '#/definitions/CommentResult'
        '401':
          description: Unauthorized access.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'No articles found with {slug}.'
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Conflict
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Comments
      security:
      - UserSecurity: []
  '/articles/{slug}/comments/{id}':
    get:
      summary: 'Gets an article with the given {slug}.'
      description: >-
        Returns a comment with the provided {id} and article {slug}. This method
        also fetches all comment under it.
      parameters:
      - name: slug
        in: path
        required: true
        description: The slug of the article to retrieve.
        type: string
      - name: id
        in: path
        required: true
        description: The slug of the article to retrieve.
        type: number
      - in: query
        name: page
        required: false
        description: Page number.
        schema:
          type: integer
          example: 1
      - in: query
        name: size
        required: false
        description: The number of articles to retrieve.
        schema:
          type: integer
          example: 20
      responses:
        '200':
          description: Response data
          schema:
            $ref: '#/definitions/CommentsResult'
        '404':
          description: 'No articles found with {slug} or No comment found with {id}'
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Comments
    post:
      summary: Adds a new comment under an existing comment with the provided id.
      description: Adds a new comment under an existing comment with the provided id.
      parameters:
      - name: slug
        in: path
        required: true
        description: The slug of the article with the comment with the id.
        type: string
      - name: id
        in: path
        required: true
        description: The id of the comment to place this comment under.
        type: number
      - name: comment
        in: body
        description: Request data
        schema:
          $ref: '#/definitions/CommentRequest'
      responses:
        '200':
          description: 'Updated article with the given {slug}'
          schema:
            $ref: '#/definitions/CommentResult'
        '401':
          description: Unauthorizated access.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'No articles found with {slug} or No comment found with the {id}'
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Comments
      security:
      - UserSecurity: []
    delete:
      summary: Delete a comment.
      description: >-
        Deletes the comment with the provided {id}, This will also delete any
        other comments under this comment.
      parameters:
      - name: slug
        in: path
        required: true
        description: The slug of the article to delete.
        type: string
      - name: id
        in: path
        required: true
        description: The id of the comment to delete.
        type: number
      responses:
        '200':
          description: Response data
          schema:
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: Successfully deleted comment
        '401':
          description: Unauthorizated access.
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden Request. Authenticated user cannot delete this comment.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'No articles found with {slug}.'
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Comments
      security:
      - UserSecurity: []
  '/articles/{slug}/comments/{id}/reactions':
    post:
      summary: Adds a new comment under an existing comment with the provided id.
      description: Adds a new comment under an existing comment with the provided id.
      parameters:
      - name: slug
        in: path
        required: true
        description: The slug of the article with the comment with the id.
        type: string
      - name: id
        in: path
        required: true
        description: The id of the comment to place this comment under.
        type: number
      - name: comment
        in: body
        description: Request data
        schema:
          $ref: '#/definitions/CommentReactionRequest'
      responses:
        '200':
          description: 'Updated article with the given {slug}'
          schema:
            $ref: '#/definitions/CommentReactionResult'
        '401':
          description: Unauthorizated access.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'No articles found with {slug} or No comment found with the {id}'
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Comments
      security:
      - UserSecurity: []
  /articles/likes/{slug}/{status}:
    post:
      summary: Create new like
      description: >-
        The route allows Authenticated users to like, dislike or neutral on any
        articles
      parameters:
      - in: path
        name: slug
        required: true
        description: article unique slug
        schema:
          $ref: '#/definitions/LikeRequest'
      - in: path
        name: status
        required: true
        description: 'like, dislike or neutral'
        type: string
        enum:
        - like
        - dislike
        - neutral
      responses:
        '200':
          description: successfully modified like status
          schema:
            $ref: '#/definitions/LikeResult'
        '201':
          description: successfully liked an article
          schema:
            $ref: '#/definitions/LikeResult'
        '400':
          description: 'status can only be either like, dislike or neutral.'
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Articles
      security:
      - UserSecurity: []
  /articles/{slug}/mailto:
    post:
      summary: Shares a public article via email.
      description: Enables the sharing of publicly available articles to any email provided. This feature is only available to authenticated users. However, any one can be the recipient of the share action.
      parameters:
      - name: slug
        in: path
        required: true
        description: The slug of the article to be shared.
        type: string
      - in: body
        name: email
        required: true
        description: The email of the user that the article was shared with
        type: string
      responses:
        '200':
          description: 'Article was successfully shared'
          schema:
            $ref: '#/definitions/ArticleShareResponseOk'
        '401':
          description: Unauthorizated access.
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Article specified for sharing is marked private by author
          schema:
            $ref: '#/definitions/ArticleShareResponseForbidden'
        '404':
          description: 'Article specified for sharing was not found'
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Articles
      security:
      - UserSecurity: []
  '/articles/{slug}/disable':
    put:
      summary: 'Disable an article by {slug}.'
      description: 'Disables and returns the disabled article. Only an Admin is allowed'
      parameters:
      - name: slug
        in: path
        required: true
        description: The slug of the article to be disabled
        type: string
      responses:
        '200':
          description: 'Disabled article with the given {slug}'
          schema:
            $ref: '#/definitions/ArticleResult'
        '401':
          description: Unauthorizated access.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'No articles found with {slug}.'
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Admin
      security:
      - UserSecurity: []
  /me/articles/:
    get:
      summary: Get all articles of an authenticated user
      description: >-
        The route allows Authenticated users to get all their articles
      parameters:
      - in: query
        name: page
        required: false
        description: Page number.
        schema:
          type: integer
          example: 1
      - in: query
        name: size
        required: false
        description: The number of reports to retrieve.
        schema:
          type: integer
          example: 20
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ArticlesResult'
        '400':
          description: Bad Request.
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Articles
      security:
      - UserSecurity: []

  /series:
    get:
      summary: Get list of series
      description: >-
        Returns a list of series. Authorization Token is optional to use this
        endpoint.
      parameters:
      - in: query
        name: page
        required: false
        description: Page number.
        schema:
          type: integer
          example: 1
      - in: query
        name: size
        required: false
        description: The number of series to retrieve.
        schema:
          type: integer
          example: 20
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SeriesArrayResult'
        '400':
          description: Bad Request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: No Series found.
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Series
    post:
      summary: Create new series
      description: >-
        This endpoint is used to create new series. Authorization Token is
        required to use this endpoint.
      parameters:
      - name: entry
        in: body
        description: Request data
        schema:
          $ref: '#/definitions/SeriesRequest'
      responses:
        '201':
          description: Article Created
          schema:
            $ref: '#/definitions/SeriesResult'
        '400':
          description: Bad Request.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorizated access.
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Series
      security:
      - UserSecurity: []
  /series/{slug}:
    get:
      summary: 'Gets an series with the given {slug}.'
      description: >-
        Returns a single series with the provided {slug}. Authorization Token
        is optional to use this endpoint.
      parameters:
      - name: slug
        in: path
        required: true
        description: The slug of the series to retrieve.
        type: string
      - in: query
        name: page
        required: false
        description: Page number.
        schema:
          type: integer
          example: 1
      - in: query
        name: size
        required: false
        description: The number of articles to retrieve when fetching the series.
        schema:
          type: integer
          example: 20
      responses:
        '200':
          description: Response data
          schema:
            $ref: '#/definitions/SingleSeriesResult'
        '404':
          description: 'No articles found with {slug}.'
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Series
    put:
      summary: 'Update article with the given {slug}.'
      description: 'Update and Return the modified article with provided {slug}.'
      parameters:
      - name: slug
        in: path
        required: true
        description: The slug of the article to be updated
        type: string
      - name: article
        in: body
        description: Request data
        schema:
          $ref: '#/definitions/ArticleRequest'
      responses:
        '200':
          description: 'Updated article with the given {slug}'
          schema:
            $ref: '#/definitions/SeriesResult'
        '401':
          description: Unauthorizated access.
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden Request. Authenticated user cannot modified this article.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'No articles found with {slug}.'
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Series
      security:
      - UserSecurity: []
    delete:
      summary: Deletes an article.
      description: >-
        Deletes an article with the {slug} provided. Authorization Token is
        required to use this endpoint.
      parameters:
      - name: slug
        in: path
        required: true
        description: The slug of the article to delete.
        type: string
      - name: series
        in: body
        description: Request data
        schema:
          properties:
            deleteContents:
              type: boolean
              example: false
      responses:
        '200':
          description: Response data
          schema:
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: Successfully deleted article
        '401':
          description: Unauthorizated access.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden Request. Authenticated user cannot delete this article.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'No articles found with {slug}.'
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Series
      security:
      - UserSecurity: []
  /series/{slug}/{follow}:
    post:
      summary: To follow or unfollow a specific series.
      description: >-
        This endpoint lets the authenticated user follow or unfollow a specific series.. Authorization Token is
        required to use this endpoint.
      parameters:
      - name: slug
        in: path
        required: true
        description: The slug of the series.
        type: string
      - name: follow
        in: path
        required: true
        description: The event type. It can only take a value of follow or unfollow
        type: string
        enum:
        - follow
        - unfollow
      responses:
        '200':
          description: Succussfully updated the event.
          schema:
            properties:
              message:
                type: string
                example: Succussfully followed/unfollowed this series.
              error:
                type: string
                example: success
        '201':
          description: Succussful followed a series for the first time.
          schema:
            properties:
              message:
                type: string
                example: Succussfully followed this series.
              error:
                type: string
                example: success
        '400':
          description: Bad Request.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorizated access.
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Series
      security:
      - UserSecurity: []
  /series/{slug}/add/articles:
    post:
      summary: Addes an article to a series
      description: >-
        This endpoint is used to add an article to a series. Authorization Token is
        required to use this endpoint.
      parameters:
      - name: slug
        in: path
        required: true
        description: The slug of the series.
        type: string
      - name: article
        in: body
        description: Request data
        schema:
          $ref: '#/definitions/ArticleRequest'
      responses:
        '201':
          description: Article Created
          schema:
            properties:
              article:
                type: object
                $ref: '#/definitions/ArticleResult'
              message:
                type: string
                example: Successfully created user article
              status:
                type: string
                example: success
        '400':
          description: Bad Request.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorizated access.
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Series
      security:
      - UserSecurity: []
  /me/series:
    get:
      summary: Get list of series for the authenticated user.
      description: >-
        Returns a list of series for the authenticated user. Authorization Token is required to use this
        endpoint.
      parameters:
      - in: query
        name: page
        required: false
        description: Page number.
        schema:
          type: integer
          example: 1
      - in: query
        name: size
        required: false
        description: The number of series to retrieve.
        schema:
          type: integer
          example: 20
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SeriesArrayResult'
        '400':
          description: Bad Request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: No series found.
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Series
      security:
      - UserSecurity: []


  /bookmark/articles:
    get:
      summary: Get list of articles bookmarked
      consumes:
      - application/json
      produces:
      - application/json
      description: >-
        Returns a list of bookmarked article with the provided {slug}.

      parameters:
      - in: query
        name: page
        required: false
        description: Page number.
        schema:
          type: integer
          example: 1
      - in: query
        name: size
        required: false
        description: The number of bookmarked articles to retrieve.
        schema:
          type: integer
          example: 20
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/BookmarksResult'
        400:
          description: Bad Request.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: No articles found.
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Bookmark
      security:
      - UserSecurity: []
  '/bookmark/articles/{slug}':
    post:
      summary: bookmark an article
      description: The route allows Authenticated users his or any other authors article
      parameters:
      - name: slug
        in: path
        description: article unique slug
      responses:
        '200':
          description: This article is already bookmarked
        '201':
          description: successfully Bookmarked an article
        '404':
          description: Article not found
      tags:
      - Bookmark
      security:
      - UserSecurity: []
    delete:
      summary: bookmark an article
      description: The route allows Authenticated users his or any other authors article
      parameters:
      - name: slug
        in: path
        description: article unique slug
      responses:
        '200':
          description: successfully  deleted article Bookmarked
        '404':
          description: Article not found
      tags:
      - Bookmark
      security:
      - UserSecurity: []


  /sentiment-analyzer:
    post:
      summary: 'Performs sentiment analysis on a given text'
      description: >-
        This endpoint serves a a proxy for performing sentiment analysis on a text using the IBM watson ToneAnalyzer v3 api.
        This endpoint throws a http status code of 500 when an error occurs in ToneAnalyzer api. The error code from
        ToneAnalyzer api is store in the errorCode field of response body. Visit https://www.ibm.com/watson/developercloud/tone-analyzer/api/v3/node.html?node
        for more details on error thrown by IBM watson ToneAnalyzer v3 api
      parameters:
      - name: text
        in: body
        description: Request data
        schema:
          $ref: '#/definitions/SentimentRequest'
      responses:
        '200':
          description: 'Returns the result of the analysis'
          schema:
            $ref: '#/definitions/SentimentResult'
        '401':
          description: Unauthorizated access.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/SentimentError'
      tags:
      - Sentiment
      security:
      - UserSecurity: []

  /report/articles:
    get:
      summary: Get list of reported articles
      consumes:
      - application/json
      produces:
      - application/json
      description: 'Returns a list of reported article with the provided {slug}.'
      parameters:
      - in: query
        name: page
        required: false
        description: Page number.
        schema:
          type: integer
          example: 1
      - in: query
        name: size
        required: false
        description: The number of reported articles to retrieve.
        schema:
          type: integer
          example: 20
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ReportsResult'
        '400':
          description: Bad Request.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: No articles found.
          schema:
            $ref: '#/definitions/Error'
      tags:
      - Report
      security:
      - UserSecurity: []
  '/report/articles/{slug}':
    post:
      summary: report an article by inserting the article's slug as request query
      description: The route allows Authenticated users report an article
      parameters:
      - name: slug
        in: path
        required: true
        description: article unique slug
      - name: request
        in: body
        required: true
        description: Report can be either plagiarism, spam, harassment or others
        schema:
          $ref: '#/definitions/ReportRequest'
      responses:
        '200':
          description: This article is already reported this article
        '201':
          description: successfully reported an article
        '404':
          description: Article not found
      tags:
      - Report
      security:
      - UserSecurity: []

  /search:
    get:
      summary: Perform full text search of available articles
      description: >-
        This endpoint helps the user to search relevant articles for a
        particular set of keywords. Users can also filter by author or tag
      parameters:
      - in: query
        name: q
        required: true
        description: The search query
        schema:
          type: string
          example: dummy
      - in: query
        name: limit
        required: false
        description: The size of results to return per query
        schema:
          type: integer
          example: 20
      - in: query
        name: page
        required: false
        description: The page of the result set to show
        schema:
          type: integer
          example: 1
      - in: query
        name: author
        required: false
        description: The id of the author to filter by
        schema:
          type: integer
      - in: query
        name: tag
        required: false
        description: The id of the tag to filter by
        schema:
          type: integer
      responses:
        '200':
          description: Search was completed successfully
          schema:
            $ref: '#/definitions/SearchResponse'
        '400':
          description: Search query is missing
          schema:
            $ref: '#/definitions/SearchError'
      tags:
      - Search

definitions:
  ArticleCommentsResult:
    properties:
      data:
        type: object
        properties:
          comments:
            type: array
            items:
              $ref: '#/definitions/CommentResult'
          count:
            type: number
            example: 2
      status:
        type: string
        example: success
      message:
        type: string
        example: Successfully fetch comment.
  ArticleRequest:
    required:
    - title
    - body
    - description
    properties:
      title:
        type: string
        example: My awesome article
      body:
        type: string
        example: >-
          Nunc sed diam suscipit, lobortis eros nec, auctor nisl. Nunc ac magna
          non justo varius rutrum sit amet feugiat elit. Pellentesque vehicula,
          ante rutrum condimentum tempor, purus metus vulputate ligula, et
          commodo tortor massa eu tortor.
      description:
        type: string
        example: 'Nunc sed diam suscipit, lobortis eros nec, auctor nisl.'
      publish:
        type: boolean
        example: false
      private:
        type: boolean
        example: false
      tags:
        type: array
        items:
          type: string
  ArticleResult:
    properties:
      title:
        type: string
        example: My awesome article
      body:
        type: string
        example: >-
          Nunc sed diam suscipit, lobortis eros nec, auctor nisl. Nunc ac magna
          non justo varius rutrum sit amet feugiat elit. Pellentesque vehicula,
          ante rutrum condimentum tempor, purus metus vulputate ligula, et
          commodo tortor massa eu tortor.

      description:
        type: string
        example: 'Nunc sed diam suscipit, lobortis eros nec, auctor nisl.'
      readingTime:
        type: string
        example: 3000
      seriesId:
        type: number
        example: 1
      isPublished:
        type: boolean
        example: true
      isPrivate:
        type: boolean
        example: false
      createdAt:
        type: string
        format: 'date-time'
        example: false
      tags:
        type: array
        items:
          type: string
      author:
        type: object
        $ref: '#/definitions/Author'
  ArticlesResult:
    properties:
      data:
        type: object
        properties:
          articles:
            type: array
            items:
              $ref: '#/definitions/ArticleResult'
          page:
            type: number
            example: 2
          totalPages:
            type: number
            example: 4
          size:
            type: number
            example: 20
          total:
            type: number
            example: 70
      status:
        type: string
        example: success
      message:
        type: string
        example: Successfully fetch articles.
  ArticleShareResponseForbidden:
    properties:
      status:
        type: string
        example: error
      message:
        type: string
        example: This article is not available for sharing
  ArticleShareResponseOk:
    properties:
      status:
        type: string
        example: success
      message:
        type: string
        example: Article was shared with email contact
  Author:
    properties:
      username:
        type: string
        example: localUser
      bio:
        type: string
        example: >-
          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
          Aenean vulputate egestas neque et euismod. Fusce sed mi ac
          tortor aliquam facilisis.
      imageUrl:
        type: string
        example: 'http://image-url.local/localUser.jpg'

  BeginPasswordResetRequest:
    required:
    - email
    properties:
      email:
        type: string
        example: femwal@maildomain.com
  BeginPasswordResetResponse:
    properties:
      status:
        type: string
        example: success
      message:
        type: string
        example: >-
          An email containing the reset password link has been sent to you. If
          you can't find the link, please try again.

  BookmarkRequest:
    required:
    - slug
    properties:
      slug:
        type: string
        example: My-awesome-article-hammed
  BookmarkResult:
    properties:
      status:
        type: string
        example: success
      message:
        type: string
        example: successfully bookmarked an article
  BookmarksRequest:
    required:
    - slug
    properties:
      slug:
        type: string
        example: My-awesome-article-hammed
  BookmarksResult:
    properties:
      data:
        type: object
        properties:
          bookmarks:
            type: array
            items:
              type: object
              properties:
                slug:
                  type: string
                  example: xxxxzzzmy-slug2-I244n1RA
                description:
                  type: string
                  example: art of coding
                body:
                  type: string
                  example: I started coding last and really awesome how much I have learnt.
                readingTime:
                  type: string
                  example: 3500
          page:
            type: number
            example: 2
          totalPages:
            type: number
            example: 4
          size:
            type: number
            example: 20
          total:
            type: number
            example: 70
      status:
        type: string
        example: success
      message:
        type: string
        example: Successfully fetch  bookmarked articles.

  CommentReactionRequest:
    required:
    - reaction
    properties:
      reaction:
        type: string
        enum:
        - like
        - dislike
        - neutral
  CommentReactionResult:
    properties:
      reaction:
        type: string
        example: like
      status:
        type: string
        example: success
      message:
        type: string
        example: successfully reacted to this commment
  CommentRequest:
    required:
    - type
    - body
    properties:
      type:
        type: string
        example: highlight
      body:
        type: string
        example: >-
          Nunc sed diam suscipit, lobortis eros nec, auctor nisl. Nunc ac magna
          non justo varius rutrum sit amet feugiat elit. Pellentesque vehicula,
          ante rutrum condimentum tempor, purus metus vulputate ligula, et
          commodo tortor massa eu tortor.


  CommentResult:
    properties:
      id:
        type: number
        example: 1
      body:
        type: string
        example: >-
          Nunc sed diam suscipit, lobortis eros nec, auctor nisl. Nunc ac magna
          non justo varius rutrum sit amet feugiat elit. Pellentesque vehicula,
          ante rutrum condimentum tempor, purus metus vulputate ligula, et
          commodo tortor massa eu tortor.

      createdAt:
        type: string
        format: 'date-time'
        example: '2018-10-08T05:02:07.631Z'
      type:
        type: string
        example: highlight
      author:
        $ref: '#/definitions/Author'
  CommentsResult:
    properties:
      comment:
        type: object
        properties:
          id:
            type: number
            example: 1
          body:
            type: string
            example: >-
              Nunc sed diam suscipit, lobortis eros nec, auctor nisl. Nunc ac
              magna non justo varius rutrum sit amet feugiat elit. Pellentesque
              vehicula, ante rutrum condimentum tempor, purus metus vulputate
              ligula, et commodo tortor massa eu tortor.
          createdAt:
            type: string
            format: 'date-time'
            example: '2018-10-08T05:02:07.631Z'
          type:
            type: string
            example: highlight
          author:
            $ref: '#/definitions/Author'
          comments:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/CommentResult'
              page:
                type: number
                example: 2
              totalPages:
                type: number
                example: 4
              size:
                type: number
                example: 20
              total:
                type: number
                example: 70

      status:
        type: string
        example: success
      message:
        type: string
        example: Successfully fetch comment.
  CompletePasswordResetRequest:
    required:
    - password
    properties:
      password:
        type: string
        example: mockingjay
  CompletePasswordResetResponse:
    properties:
      status:
        type: string
        example: success
      message:
        type: string
        example: Password has been successfully reset!.

  Error:
    properties:
      status:
        type: string
        example: error
      message:
        type: string
        example: error message

  LikeRequest:
    required:
    - slug
    - status
    properties:
      slug:
        type: string
        example: My-awesome-article-hammed
    status:
      type: string
      example: like
  LikeResult:
    message:
      type: string
      example: successfully liked an article
    properties:
      status:
        type: string
        example: error
      message:
        type: string
        example: user already liked this article
  LoginRequest:
    required:
    - email
    - password
    properties:
      email:
        type: string
        example: dummy-user@local.host
      password:
        type: string
        example: password
  LoginResponse:
    properties:
      email:
        type: string
        example: victor@gmail.com
      token:
        type: string
        example: >-
          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIyLCJpYXQiOjE1Mzg2Mzc5NDAsImV4cCI6MTUzODcyNDM0MH0.wX_lC4o3lSILVYJaGp2q-WadFIzdsGwN4QeU7sNAJ8M
      username:
        type: string
        example: victor
      bio:
        type: string
        example: >-
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean
          vulputate egestas neque et euismod. Fusce sed mi ac tortor aliquam
          facilisis.
      imageUrl:
        type: string
        example: 'http://image-url.local/localUser.jpg'

  NotificationResult:
    properties:
      status:
        type: string
        example: success
      notifications:
        type: object
        properties:
          id:
            type: number
            example: 13
          isRead:
            type: boolean
            example: false
          message:
            type: string
            example: 'victorbk started following you Thursday, October 18, 2018 10:44 AM ago'
          createdAt:
            type: string
            format: 'date-time'
            example: '2018-11-18T09:44:37.777Z'


  ProfileRequest:
    properties:
      username:
        type: string
        example: hammed
      email:
        type: string
        example: hammed@local.host
      firstName:
        type: string
        example: Hameedah
      lastName:
        type: string
        example: Okoro
      bio:
        type: string
        example: Some description about the user
      imageUrl:
        type: string
        example: 'http://www.url-to-some-image.com'
      settings:
        type: object
        properties:
          articleLike:
            type: boolean
            example: true
          newFollower:
            type: boolean
            example: true
          emailSubcribe:
            type: boolean
            example: true
          articleComment:
            type: boolean
            example: true
          newArticleFromUserFollowing:
            type: boolean
            example: true
          newFollowerOnSeries:
            type: boolean
            example: true
  ProfileResponse:
    properties:

      status:
        type: string
        example: success
      message:
        type: string
        example: Please check your Email for account confirmation
      profile:
        type: object
        properties:
          id:
            type: number
            example: 1
          username:
            type: string
            example: hammed
          email:
            type: string
            example: hammed@local.host
          firstName:
            type: string
            example: Hameedah
          lastName:
            type: string
            example: Okoro
          bio:
            type: string
            example: Some description about the user
          imageUrl:
            type: string
            example: 'http://www.url-to-some-image.com'
          role:
            type: string
            example: admin
          createdAt:
            type: string
            format: 'date-time'
            example: '2018-10-08T05:02:07.631Z'
          updatedAt:
            type: string
            format: 'date-time'
            example: '2018-10-08T05:02:07.631Z'
  ProfileListResponse:
    properties:
      status:
        type: string
        example: success
      message:
        type: string
        example: Successfully retrieved list of authors.
      data:
        type: object
        properties:
          authors:
            type: array
            items:
              $ref: '#/definitions/ProfileResponse'
          page:
            type: number
            example: 2
          totalPages:
            type: number
            example: 4
          size:
            type: number
            example: 20
          total:
            type: number
            example: 70

  ReportRequest:
    required:
    - reportType
    - description
    properties:
      reportType:
        type: string
        example: spam
        enum:
          - plagiarism
          - spam
          - harassment
          - others
      description:
        type: string
        example: 'sed diam suscipit, lobortis eros nec, auctor nisl.'
  ReportsResult:
    properties:
      data:
        type: object
        properties:
          reports:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  example: 2
                articleId:
                  type: integer
                  example: 23
                reportType:
                  type: string
                  example: plagiarism
                description:
                  type: string
                  example: copyright issue
          page:
            type: number
            example: 2
          size:
            type: number
            example: 2
          total:
            type: number
            example: 70
      status:
        type: string
        example: success
      message:
        type: string
        example: Successfully fetch  all reported articles.

  SearchError:
    properties:
      status:
        type: string
        example: error
      message:
        type: string
        example: Please supply a query
  SearchResponse:
    properties:
      results:
        type: array
        example: []
      meta:
        type: object
        properties:
          totalCount:
            type: integer
            example: 20
          page:
            type: integer
            example: 1
          limit:
            type: integer
            example: 10
          query:
            type: string
            example: A random query
  SentimentError:
    properties:
      status:
        type: string
        example: error
      message:
        type: string
        example: Request Too Large to be process
      errorCode:
        type: number
        example: 413
  SentimentRequest:
    required:
    - text
    properties:
      text:
        type: string
        example: Greetings from the Authors Haven, we are pleased to say hello!
  SentimentResult:
    properties:
      result:
        type: object
        properties:
          document_tone:
            type: object
            properties:
              tones:
                type: array
                items:
                  $ref: '#/definitions/Tones'
          sentences_tone:
            type: array
            items:
              $ref: '#/definitions/Tones'
  Series:
    properties:
      description:
        type: string
        example: >-
          some really long description
      slug:
        type: string
        example: my-awesome-series
      title:
        type: string
        example: My awesome series
      imageUrl:
        type: string
        example: http://localhost:3000/path/to/my/awesome/series/cover.jpeg
      tags:
        type: array
        items:
          type: string
          example: Food
      author:
        $ref: '#/definitions/Author'
      articles:
        type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/definitions/ArticleResult'
          page:
            type: number
            example: 2
          totalPages:
            type: number
            example: 4
          size:
            type: number
            example: 20
          total:
            type: number
            example: 70
  SeriesArrayResult:
    properties:
      data:
        type: object
        properties:
          series:
            type: array
            items:
              $ref: '#/definitions/SeriesResult'
          page:
            type: number
            example: 2
          totalPages:
            type: number
            example: 4
          size:
            type: number
            example: 20
          total:
            type: number
            example: 70
      message:
        type: string
        example: message
      status:
        type: string
        example: success
  SeriesRequest:
    required:
    - description
    - title
    - imageUrl
    properties:
      title:
        type: string
        example: My awesome series
      description:
        type: string
        example: Greetings from the Authors Haven, we are pleased to say hello!
      imageUrl:
        type: string
        example: http://localhost:3000/path/to/my/awesome/series/cover.jpeg
  SeriesResult:
    properties:
      series:
        type: object
        properties:
          description:
            type: string
            example: >-
              some really long description
          slug:
            type: string
            example: my-awesome-series
          title:
            type: string
            example: My awesome series
          imageUrl:
            type: string
            example: http://localhost:3000/path/to/my/awesome/series/cover.jpeg
          tags:
            type: array
            items:
              type: string
              example:
              - 'reactjs'
              - 'angular'
          author:
            $ref: '#/definitions/Author'
      message:
        type: string
        example: message
      status:
        type: string
        example: success
  SingleSeriesResult:
    properties:
      series:
        $ref: '#/definitions/Series'
  StatisticsResult:
    properties:
      totalArticles:
        type: object
        properties:
          count:
            type: integer
            example: 19
      unique:
        type: integer
        example: 13
      allViews:
        type: integer
        example: 79
      message:
        type: string
        example: 'Reading statistics retrieved Successfully'


  Tones:
    properties:
      score:
        type: number
        example: 0.57529
      tone_id:
        type: string
        example: sadness
      tone_name:
        type: string
        example: Sadness

  UserError:
    properties:
      status:
        type: string
        example: error
      message:
        type: string
        example: Account already exist
  UserRequest:
    required:
    - email
    - username
    - password
    properties:
      username:
        type: string
        example: hammed
      email:
        type: string
        example: hnobi08@yahoo.com
      password:
        type: string
        example: password
  UserResult:
    properties:
      status:
        type: string
        example: success
      message:
        type: string
        example: Please check your Email for account confirmation

