swagger: "2.0"
info:
  title: Odin-ah-backend
  description: " A Social platform for the creative at heart."
  version: v1
securityDefinitions:
  UserSecurity:
    type: apiKey
    in: header
    name: Authorization

host: 127.0.0.1:3000
basePath: /api/v1
produces:
  - application/json
schemes:
  - http
  - https
paths:
  /auth/signup:
    post:
      summary: Add new user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user information
          description: user username
          schema:
            $ref: "#/definitions/UserRequest"
      responses:
        "201":
          description: Expected response to a valid request
          schema:
            $ref: "#/definitions/UserResult"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: A conflict occured.
          schema:
            $ref: "#/definitions/UserError"
      tags:
        - User
  /auth/login:
    post:
      summary: Login in an existing user
      description: Login in an existing user.
      parameters:
        - in: body
          name: user
          description: Author's Username
          schema:
            $ref: "#/definitions/LoginRequest"
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/LoginResponse"
        "400":
          description: Bad Request..
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Invalid user credentials.
          schema:
            $ref: "#/definitions/Error"
      tags:
        - Authentication
  /auth/google:
    post:
      summary: Signs in a user with Google OAuth
      description: Signs in a user with Google OAuth2 and responds with an authentication token for further requests
      responses:
        "200":
          description: Authentication was successful
          schema:
            $ref: "#/definitions/LoginResponse"
        "401":
          description: Authentication failed
          schema:
            $ref: "#/definitions/Error"
        "422":
          description: User's social account does not have any associated email. This is especially an issue with Facebook.
          schema:
            $ref: "#/definitions/Error"
      tags:
        - Authentication
  /auth/facebook:
    post:
      summary: Signs in a user with Facebook OAuth
      description: Signs in a user with Facebook OAuth2 and responds with an authentication token for further requests
      responses:
        "200":
          description: Authentication was successful
          schema:
            $ref: "#/definitions/LoginResponse"
        "401":
          description: Authentication failed
          schema:
            $ref: "#/definitions/Error"
        "422":
          description: User's social account does not have any associated email. This is especially an issue with Facebook.
          schema:
            $ref: "#/definitions/Error"
      tags:
        - Authentication
  /auth/twitter:
    post:
      summary: Signs in a user with Twitter OAuth
      description: Signs in a user with Twitter OAuth and responds with an authentication token for further requests
      responses:
        "200":
          description: Authentication was successful
          schema:
            $ref: "#/definitions/LoginResponse"
        "401":
          description: Authentication failed
          schema:
            $ref: "#/definitions/Error"
        "422":
          description: User's social account does not have any associated email. This is especially an issue with Facebook.
          schema:
            $ref: "#/definitions/Error"
      tags:
        - Authentication
  /articles:
    get:
      summary: Get list of articles
      description: >-
        Returns a list of articles. Authorization Token is optional to use this
        endpoint.
      parameters:
        - in: query
          name: page
          required: true
          schema:
            type: integer
            description: Page number.
        - in: query
          name: size
          required: true
          schema:
            type: integer
            description: The number of articles to retrieve.
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/ArticlesResult"
        "400":
          description: Bad Request.
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: No articles found.
          schema:
            $ref: "#/definitions/Error"
      tags:
        - Articles
    post:
      summary: Create new article
      description: >-
        This endpoint is used to create new article. Authorization Token is
        required to use this endpoint.
      parameters:
        - name: entry
          in: body
          description: Request data
          schema:
            $ref: "#/definitions/ArticleRequest"
      responses:
        "201":
          description: Article Created
          schema:
            $ref: "#/definitions/ArticleResult"
        "400":
          description: Bad Request.
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Unauthorizated access.
          schema:
            $ref: "#/definitions/Error"
      tags:
        - Articles
      security:
        - UserSecurity: []
  "/articles/{slug}":
    get:
      summary: "Gets an article with the given {slug}."
      description: >-
        Returns a single article with the provided {slug}. Authorization Token
        is optional to use this endpoint.
      parameters:
        - name: slug
          in: path
          required: true
          description: The slug of the article to retrieve.
          type: string
      responses:
        "200":
          description: Response data
          schema:
            $ref: "#/definitions/ArticleResult"
        "404":
          description: "No articles found with {slug}."
          schema:
            $ref: "#/definitions/Error"
      tags:
        - Articles

    put:
      summary: "Update article with the given {slug}."
      description: "Update and Return the modified article with provided {slug}."
      parameters:
        - name: slug
          in: path
          required: true
          description: The slug of the article to be updated
          type: string
        - name: entry
          in: body
          description: Request data
          schema:
            $ref: "#/definitions/ArticleRequest"
      responses:
        "200":
          description: "Updated article with the given {slug}"
          schema:
            $ref: "#/definitions/ArticleResult"
        "401":
          description: Unauthorizated access.
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: Forbidden Request. Authenticated user cannot modified this article.
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "No articles found with {slug}."
          schema:
            $ref: "#/definitions/Error"
      tags:
        - Articles
      security:
        - UserSecurity: []
    delete:
      summary: Deletes an article.
      description: >-
        Deletes an article with the {slug} provided. Authorization Token is
        required to use this endpoint.
      parameters:
        - name: slug
          in: path
          required: true
          description: The slug of the article to delete.
          type: string
      responses:
        200:
          description: Response data
          schema:
            properties:
              status:
                type: string
                example: success
              message:
                type: string
                example: Successfully deleted article
        "401":
          description: Unauthorizated access.
          schema:
            $ref: "#/definitions/Error"
        403:
          description: Unauthorized access
          schema:
            $ref: "#/definitions/Error"
        404:
          description: No articles found with {slug}.
          schema:
            $ref: "#/definitions/Error"
      tags:
        - Articles
      security:
        - UserSecurity: []

  /users:
    put:
      summary: Update a User Profile
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: profile
          description: A User Profile that needs to be Updated
          schema:
            $ref: "#/definitions/UserRequest"
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/UserResult"
        "409":
          description: Conflict
        "500":
          description: Server Error
      tags:
        - Users
      security:
        - UserSecurity: []
    get:
      summary: "Get a User Profile"
      produces:
        - "application/json"
      responses:
        200:
          description: "Successful Operation"
          schema:
            $ref: "#/definitions/UserResult"
        404:
          description: "Profile not found"
        500:
          description: "Server error"
      tags:
        - Users
      security:
        - UserSecurity: []

definitions:
  UserRequest:
    required:
      - email
      - username
      - password
    properties:
      username:
        type: string
        example: hammed
      email:
        type: string
        example: hnobi08@yahoo.com
      password:
        type: string
        example: password
  UserResult:
    properties:
      status:
        type: string
        example: success
      message:
        type: string
        example: Please check your Email for account confirmation
  UserError:
    properties:
      status:
        type: string
        example: failed
      message:
        type: string
        example: Account already exist
  LoginRequest:
    required:
      - email
      - password
    properties:
      email:
        type: string
        example: victor@gmail.com
      password:
        type: string
        example: password
  LoginResponse:
    properties:
      email:
        type: string
        example: victor@gmail.com
      token:
        type: string
        example: >-
          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIyLCJpYXQiOjE1Mzg2Mzc5NDAsImV4cCI6MTUzODcyNDM0MH0.wX_lC4o3lSILVYJaGp2q-WadFIzdsGwN4QeU7sNAJ8M
      username:
        type: string
        example: victor
      bio:
        type: string
        example: >-
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean
          vulputate egestas neque et euismod. Fusce sed mi ac tortor aliquam
          facilisis.
      image:
        type: string
        example: "http://image-url.local/localUser.jpg"
  ArticleRequest:
    required:
      - title
      - body
      - description
    properties:
      title:
        type: string
        example: My awesome article
      body:
        type: string
        example: >-
          Nunc sed diam suscipit, lobortis eros nec, auctor nisl. Nunc ac magna
          non justo varius rutrum sit amet feugiat elit. Pellentesque vehicula,
          ante rutrum condimentum tempor, purus metus vulputate ligula, et
          commodo tortor massa eu tortor.
      description:
        type: string
        example: "Nunc sed diam suscipit, lobortis eros nec, auctor nisl."
      tags:
        type: array
        items:
          type: string
  ArticleResult:
    properties:
      title:
        type: string
        example: My awesome article
      body:
        type: string
        example: >-
          Nunc sed diam suscipit, lobortis eros nec, auctor nisl. Nunc ac magna
          non justo varius rutrum sit amet feugiat elit. Pellentesque vehicula,
          ante rutrum condimentum tempor, purus metus vulputate ligula, et
          commodo tortor massa eu tortor.
      description:
        type: string
        example: "Nunc sed diam suscipit, lobortis eros nec, auctor nisl."
      tags:
        type: array
        items:
          type: string
      author:
        type: object
        properties:
          username:
            type: string
            example: localUser
          bio:
            type: string
            example: >-
              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean
              vulputate egestas neque et euismod. Fusce sed mi ac tortor aliquam
              facilisis.
          image:
            type: string
            example: "http://image-url.local/localUser.jpg"
  ArticlesResult:
    properties:
      data:
        type: object
        properties:
          articles:
            type: array
            items:
              $ref: "#/definitions/ArticleResult"
          page:
            type: number
            example: 2
          size:
            type: number
            example: 20
          total:
            type: number
            example: 70
      status:
        type: string
        example: success
      message:
        type: string
        example: Successfully fetch articles.
  Error:
    properties:
      status:
        type: string
        example: error
  ProfileRequest:
    required:
      - username
      - email
      - firstName
      - lastName
      - bio
      - imageUrl
      - password
    properties:
      username:
        type: string
        example: hammed
      email:
        type: string
        example: hammed@local.host
      firstName:
        type: string
        example: Hameedah
      lastName:
        type: string
        example: Okoro
      bio:
        type: string
        example: Some description about the user
      imageUrl:
        type: string
        example: http://www.url-to-some-image.com
      password:
        type: string
        example: password
  ProfileResponse:
    properties:
      username:
        type: string
        example: hammed
      email:
        type: string
        example: hammed@local.host
      firstName:
        type: string
        example: Hameedah
      lastName:
        type: string
        example: Okoro
      bio:
        type: string
        example: Some description about the user
      imageUrl:
        type: string
        example: http://www.url-to-some-image.com
      createdAt:
        type: string
        example: 1/10/ 2018
      updatedAt:
        type: string
        example: 1/10/ 2018
